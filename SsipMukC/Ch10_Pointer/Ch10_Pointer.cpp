#include<iostream>

using namespace std;

int main()
{
	//int* ptr;
	//int a;
	//a = 3;
	//ptr = &a;
	//
	//cout << "ptr의 값 : " << ptr << '\n';
	//cout << "a의 주소값 : " << &a << '\n';
	//cout << "a의 실제값 : " << a << '\n';
	//cout << "ptr이 가리키는 데이터 값 : " << *ptr << '\n';
	//
	//a++;
	//cout << "ptr의 값 : " << ptr << '\n';
	//cout << "a의 주소값 : " << &a << '\n';
	//cout << "a의 실제값 : " << a << '\n';
	//cout << "ptr이 가리키는 데이터 값 : " << *ptr << '\n';
	 
	// ---------------------ptr에 상수 표기했을떄---------
	
	//=====const(자료형)*(변수명)
	//int a, b;
	//const int* ptr = &a;
	//*ptr = 3;
	//ptr = &b;
	//이때는 포인터가 가리키는 값을 상수로 두겠다는 의미라서, *ptr 처럼 값을 변하게 하면 안된다.
	//반면 a=3; 은 a변수에 값을 넣는 것이므로 괜찮다.

	//=====(자료형)*const(변수명)
	//int a, b;
	//int* const ptr = &a;
	//*ptr = 3;
	//ptr = &b;
	//이때는 포인터가 가리키는 주소를 상수로 두겠다는 의미라서, ptr=&b 처럼 주소를 변경할 수 없다.

	//---------------------포인터의 덧셈-----------------------

	//int a;
	//int* ptr;
	//ptr = &a;
	//
	//cout << "ptr에 저장된 것 : " << ptr<<'\n';
	//cout << "ptr+1에 저장된 것 : " << ptr+1<<'\n';

	//int A;
	//char B;
	//double C;
	//
	//int* pA = &A;
	//char* pB = &B;
	//double* pC = &C;
	//
	//cout << "pA에 저장된 것 : " << pA << '\n';
	//cout << "pA+1에 저장된 것 : " << pA+1 << '\n';//4바이트 증가
	//cout << "pB에 저장된 것 : " << pB << '\n';
	//cout << "pB+1에 저장된 것 : " << pB + 1 << '\n';//1바이트 증가
	//cout << "pC에 저장된 것 : " << pC << '\n';
	//cout << "pC+1에 저장된 것 : " << pC + 1 << '\n';//8바이트 증가
	//뺄셈은 덧셈과 같이 -를 수행한다.

	//=======포인터 끼리 덧셈/뺄셈???================
	//int a;
	//int b;
	//
	//int* pa = &a;
	//int* pb=&b;
	//
	//int* pc = pa + pa;
	//안된다. 변수의 주소의 합은 의미가 없기 때문이다.
	//뺄셈은 된다... 띠용???

	//=======포인터의 대입???============
	int a=3;

	int* pa = &a;
	int* pb;

	pb = pa;
	
	cout << "pa에 저장된 주소 : " << pa << '\n';
	cout << "pb에 저장된 주소 : " << pb << '\n';

	cout << "pa에 저장된 값 : " << *pa << '\n';
	cout << "pb에 저장된 값 : " << *pb << '\n';
	//pa, pb 둘다 주소값을 저장하는 변수이므로 pa를 pb에 대입하는 것이 가능하다.
	//이때, 둘의 데이터형이 같아야한다.
}